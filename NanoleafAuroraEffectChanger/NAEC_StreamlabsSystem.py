#---------------------------------------
#   Import Libraries
#---------------------------------------
import clr
clr.AddReference("IronPython.SQLite.dll")
clr.AddReference("IronPython.Modules.dll")
import os
import json
import codecs


#---------------------------------------
#   [Required]	Script Information
#---------------------------------------
ScriptName = "NA Effect Changer"
Website = "https://www.twitch.tv/CyberHumi"
Creator = "CyberHumi"
Version = "1.6"
Description = "Nanoleaf Aurora Effect Changer"

#---------------------------------------
#   Set Variables
#---------------------------------------
configFile = "NAEC.json"
batFile = "NAEC_SLCB_CLIENT.bat"
settings = {}

#---------------------------------------
#   read config file
#---------------------------------------
def readConfigFile():
    global settings, configFile

    path = os.path.dirname(__file__)
    try:
        with codecs.open(os.path.join(path, configFile), encoding='utf-8-sig', mode='r') as file:
            settings = json.load(file, encoding='utf-8-sig')
    except:
        settings = {
            "python3": "C:\\Python37",
            "chat_command": "!nl",
            "chat_command_permission": "Moderator",
            "chat_command_onEvent": "$username changed Nanoleaf Aurora light effect",
            "chat_command_costs": 0,
            "chat_command_cooldown": 5,
            "chat_command_onCooldown": "$username, the command is still on cooldown for $cd seconds!",
            "chat_command_usercooldown": 5,
            "chat_command_onUserCooldown": "$username the command is still on user cooldown for $cd seconds!",
            "chat_command_responseNotEnoughPoints": "It seems $username has not enough $currency.",
            "chat_command_default_effect_duration": 5,
            "chat_command_max_effect_duration": 5,
            "chat_device": "Nanoleaf Aurora 1 + 2"
        }

#---------------------------------------
#   [Required] Initialize Data / Load Only
#---------------------------------------
def Init():
    global settings
    path = os.path.dirname(__file__)
    readConfigFile()
    try:
        with open(os.path.join(path, batFile), "w") as bat:
             bat.write('@echo off\n')
             bat.write('REM generated by Nanoleaf Aurora Effect Changer\n')
             bat.write(':start\n')
             bat.write('"{}\python.exe" NAEC.py\n'.format(settings["python3"]))
             bat.write('goto start\n')
    except:
        pass

    return

def Execute(data):
    global settings, userId, username, ScriptName

    naecEvent = {
        "effect_default": settings["default_effect"],
        "effect_new": settings["default_effect"],
        "effect_duration": settings["chat_command_default_effect_duration"],
        "effect_parameter": ""
    }

    cmds = [ settings["chat_command"], settings["chat_cmd1"], settings["chat_cmd2"], settings["chat_cmd3"], settings["chat_cmd4"], settings["chat_cmd5"], settings["chat_cmd6"], settings["chat_cmd7"], settings["chat_cmd8"], settings["chat_cmd9"], settings["chat_cmd10"] ]
    if data.IsChatMessage() and Parent.HasPermission(data.User, settings["chat_command_permission"], "") and data.GetParam(0) in cmds:
        tempResponseString = ""
        userId = data.User
        username = data.UserName
        cd = ""

        effect_new = ""
        if data.GetParam(0) == settings["chat_command"]:
            for x in range(1, data.GetParamCount()):
                if x == data.GetParamCount()-1:
                    try:
                        int(data.GetParam(x))
                        if( int(data.GetParam(x)) < int(settings["chat_command_max_effect_duration"]) ):
                            naecEvent["effect_duration"] = data.GetParam(x)
                        else:
                            naecEvent["effect_duration"] = settings["chat_command_max_effect_duration"]
                    except:
                        effect_new += data.GetParam(x) + " "
                else:
                    effect_new += data.GetParam(x) + " "
        else:
            for x in range(1,11):
                if data.GetParam(0) == settings["chat_cmd"+str(x)]:
                   effect_new += settings["chat_cmd"+str(x)+"e"]
        effect_new = effect_new.strip()
        if effect_new != "":
            naecEvent["effect_new"] = effect_new

        # Check if the User has enough points
        if settings["chat_command_costs"] > Parent.GetPoints(userId):
            tempResponseString = settings["chat_command_responseNotEnoughPoints"]
            tempResponseString = tempResponseString.replace("$currency", str(Parent.GetCurrencyName()))
        # Check if there is a cooldown active
        elif settings["chat_command_usercooldown"] and (Parent.IsOnCooldown(ScriptName, settings["chat_command"]) or Parent.IsOnUserCooldown(ScriptName, settings["chat_command"], userId)):
            if Parent.GetCooldownDuration(ScriptName, settings["chat_command"]) > Parent.GetUserCooldownDuration(ScriptName, settings["chat_command"], userId):
                cd = Parent.GetCooldownDuration(ScriptName, settings["chat_command"])
                tempResponseString = settings["chat_command_onCooldown"]
            else:
                cd = Parent.GetUserCooldownDuration(ScriptName, settings["chat_command"], userId)
                tempResponseString = settings["chat_command_onUserCooldown"]
            tempResponseString = tempResponseString.replace("$cd", str(cd))
        else:
            if int(settings["chat_command_costs"]) > 0:
                Parent.RemovePoints(userId, username, settings["chat_command_costs"])

            # send effect change request
            Parent.BroadcastWsEvent("EVENT_NAEC", json.dumps(naecEvent, encoding='utf-8-sig'))
            tempResponseString = settings["chat_command_onEvent"]

            Parent.AddUserCooldown(ScriptName, settings["chat_command"], userId, settings["chat_command_usercooldown"])
            Parent.AddCooldown(ScriptName, settings["chat_command"], settings["chat_command_cooldown"])

        tempResponseString = tempResponseString.replace("$username", str(username))
        tempResponseString = tempResponseString.replace("$user", str(username))
        Parent.SendStreamMessage(tempResponseString)
    return

def Tick():
    return

#---------------------------
#   [Optional] Reload Settings (Called when a user clicks the Save Settings button in the Chatbot UI)
#---------------------------
def ReloadSettings(jsonData):
    readConfigFile()
    Parent.BroadcastWsEvent("EVENT_NAECUPDATE", "")
    return

#---------------------------
#   [Optional] ScriptToggled (Notifies you when a user disables your script or enables it)
#---------------------------
def ScriptToggled(state):
    if( state ):
        readConfigFile()
        Parent.BroadcastWsEvent("EVENT_NAECUPDATE", "")
    return


#---------------------------
#   Weblinks
#---------------------------
def OpenWebsiteGitHub():
    os.startfile("https://github.com/CyberHumi/Chatbot-Scripts")
    return

def OpenWebsiteGitHubInstallation():
    os.startfile("https://github.com/CyberHumi/Chatbot-Scripts/wiki/Installation")
    return

def OpenWebsiteTwitter():
    os.startfile("https://twitter.com/CyberHumiDE")
    return

def OpenWebsiteTwitch():
    os.startfile("https://www.twitch.tv/cyberhumi")
    return

def OpenWebsiteDiscord():
    os.startfile("https://discord.gg/UYpvv55")
    return

